@misc{zeng2024flightllm,
    title={FlightLLM: Efficient Large Language Model Inference with a Complete Mapping Flow on FPGAs}, 
    author={Shulin Zeng and Jun Liu and Guohao Dai and Xinhao Yang and Tianyu Fu and Hongyi Wang and Wenheng Ma and Hanbo Sun and Shiyao Li and Zixiao Huang and Yadong Dai and Jintao Li and Zehao Wang and Ruoyu Zhang and Kairui Wen and Xuefei Ning and Yu Wang},
    year={2024},
    eprint={2401.03868},
    archivePrefix={arXiv},
    primaryClass={cs.AR}
}
@inproceedings{rpython,
 	author = {Ancona, Davide and Ancona, Massimo and Cuni, Antonio and Matsakis, Nicholas D.},
 	title = {RPython: a step towards reconciling dynamically and statically typed OO languages},
 	booktitle = {DLS '07: Proceedings of the 2007 symposium on Dynamic languages},
 	year = {2007},
 	isbn = {978-1-59593-868-8},
 	pages = {53--64},
 	location = {Montreal, Quebec, Canada},
 	doi = {http://doi.acm.org/10.1145/1297081.1297091},
 	publisher = {ACM},
 	address = {New York, NY, USA},
}
@inproceedings{pypy1,
author = {Bolz, Carl Friedrich and Cuni, Antonio and Fijalkowski, Maciej and Rigo, Armin},
title = {Tracing the meta-level: PyPy's tracing JIT compiler},
year = {2009},
isbn = {9781605585413},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1565824.1565827},
doi = {10.1145/1565824.1565827},
abstract = {We attempt to apply the technique of Tracing JIT Compilers in the context of the PyPy project, i.e., to programs that are interpreters for some dynamic languages, including Python. Tracing JIT compilers can greatly speed up programs that spend most of their time in loops in which they take similar code paths. However, applying an unmodified tracing JIT to a program that is itself a bytecode interpreter results in very limited or no speedup. In this paper we show how to guide tracing JIT compilers to greatly improve the speed of bytecode interpreters. One crucial point is to unroll the bytecode dispatch loop, based on two kinds of hints provided by the implementer of the bytecode interpreter. We evaluate our technique by applying it to two PyPy interpreters: one is a small example, and the other one is the full Python interpreter.},
booktitle = {Proceedings of the 4th Workshop on the Implementation, Compilation, Optimization of Object-Oriented Languages and Programming Systems},
pages = {18â€“25},
numpages = {8},
location = {Genova, Italy},
series = {ICOOOLPS '09}
}
@misc{izawa2022threaded,
      title={Threaded Code Generation with a Meta-Tracing JIT Compiler}, 
      author={Yusuke Izawa and Hidehiko Masuhara and Carl Friedrich Bolz-Tereick and Youyou Cong},
      year={2022},
      eprint={2106.12496},
      archivePrefix={arXiv},
      primaryClass={cs.PL}
}
@inproceedings{pypy2,
 author = {Rigo, Armin and Pedroni, Samuele},
 title = {PyPy's approach to virtual machine construction},
 booktitle = {OOPSLA '06: Companion to the 21st ACM SIGPLAN symposium on Object-oriented programming systems, languages, and applications},
 year = {2006},
 isbn = {1-59593-491-X},
 pages = {944--953},
 location = {Portland, Oregon, USA},
 doi = {http://doi.acm.org/10.1145/1176617.1176753},
 publisher = {ACM},
 address = {New York, NY, USA},
 }
@Article{harris2020array,
 title         = {Array programming with {NumPy}},
 author        = {Charles R. Harris and K. Jarrod Millman and St{\'{e}}fan J.
                 van der Walt and Ralf Gommers and Pauli Virtanen and David
                 Cournapeau and Eric Wieser and Julian Taylor and Sebastian
                 Berg and Nathaniel J. Smith and Robert Kern and Matti Picus
                 and Stephan Hoyer and Marten H. van Kerkwijk and Matthew
                 Brett and Allan Haldane and Jaime Fern{\'{a}}ndez del
                 R{\'{i}}o and Mark Wiebe and Pearu Peterson and Pierre
                 G{\'{e}}rard-Marchant and Kevin Sheppard and Tyler Reddy and
                 Warren Weckesser and Hameer Abbasi and Christoph Gohlke and
                 Travis E. Oliphant},
 year          = {2020},
 month         = sep,
 journal       = {Nature},
 volume        = {585},
 number        = {7825},
 pages         = {357--362},
 doi           = {10.1038/s41586-020-2649-2},
 publisher     = {Springer Science and Business Media {LLC}},
 url           = {https://doi.org/10.1038/s41586-020-2649-2}
}
@ARTICLE{cython,
  author={Behnel, Stefan and Bradshaw, Robert and Citro, Craig and Dalcin, Lisandro and Seljebotn, Dag Sverre and Smith, Kurt},
  journal={Computing in Science & Engineering}, 
  title={Cython: The Best of Both Worlds}, 
  year={2011},
  volume={13},
  number={2},
  pages={31-39},
  keywords={Sparse matrices;Runtime;Syntactics;Computer programs;Programming;Python;Cython;numerics;scientific computing},
  doi={10.1109/MCSE.2010.118}}